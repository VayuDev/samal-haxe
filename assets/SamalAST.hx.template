@start_hx
import haxe.Int32;
import samal.lang.Datatype;
import haxe.Exception;
using samal.lang.Util.NullTools;
using samal.lang.Datatype.DatatypeHelpers;
@end_hx

class NameAndTypeParam {
    -name : String
    -datatype : Datatype
}
class SamalCreateUsertypeParam {
    -fieldName : String
    -value : SamalExpression
}

class SamalSimpleTailCallSelfParam {
    -paramName : String
    -value : SamalExpression
}

class UsertypeField {
    -fieldName : String
    -datatype : Datatype
}

class EnumDeclVariant {
    -name : String
    -fields : Array<UsertypeField>
}



class IdentifierWithTemplate {
    -Name : String
    -TemplateParams : Array<Datatype>
    @start_hx
    public function mangled() {
        return Util.mangle(mName, mTemplateParams);
    }
    public function dump() : String {
        if(mTemplateParams.length == 0) {
            return mName;
        }
        return mName + "<" + mTemplateParams.map(function(type) {return type.getName();}).join(", ") + ">";
    }
    @end_hx
}


class SamalASTNode extends ASTNode {
    
}

class SamalModule extends SamalASTNode {
    -moduleName : String
    +declarations : Array<SamalDeclaration>
}

class SamalDeclaration extends SamalASTNode {
    +name : IdentifierWithTemplate
    @start_hx
    public function completeWithUserTypeMap(mapper : StringToDatatypeMapper) : Void {
        throw new Exception("Not implemented!");
    }
    public function cloneWithTemplateParams(typeMap : StringToDatatypeMapper, templateParams : Array<Datatype>) : SamalDeclaration {
        throw new Exception("Not implemented!");
    }
    public function getDatatype() : Datatype {
        throw new Exception("Not implemented!");
    }
    public function getTemplateParams() : Array<Datatype> {
        return mName.getTemplateParams();
    }
    @end_hx
}

class SamalFunctionDeclaration extends SamalDeclaration {
    -params : Array<NameAndTypeParam>
    -returnType : Datatype
    -body : SamalScope
    @start_hx
    public override function completeWithUserTypeMap(mapper : StringToDatatypeMapper) {
        mReturnType = mReturnType.complete(mapper);
        mParams = mParams.map(function(p) {
            return NameAndTypeParam.create(p.getName(), p.getDatatype().complete(mapper));
        });
    }
    public override function getDatatype() : Datatype {
        return Datatype.Function(mReturnType, mParams.map(function(p) {return p.getDatatype();}));
    }
    public override function cloneWithTemplateParams(mapper : StringToDatatypeMapper, templateParams : Array<Datatype>) : SamalFunctionDeclaration {
        final params = mParams.map(function(p) {
            return NameAndTypeParam.create(p.getName(), p.getDatatype().complete(mapper));
        });
        final body = mBody.clone();
        return SamalFunctionDeclaration.create(getSourceRef(), new IdentifierWithTemplate(mName.getName(), templateParams), params, mReturnType.complete(mapper), body);
    }
    @end_hx
}
class SamalDatatypeDeclaration extends SamalDeclaration {
}

class SamalStructDeclaration extends SamalDatatypeDeclaration {
    -fields : Array<UsertypeField>
    @start_hx
    public override function completeWithUserTypeMap(mapper : StringToDatatypeMapper) : Void {
        mFields = mFields.map(function(p) {
            return UsertypeField.create(p.getFieldName(), p.getDatatype().complete(mapper));
        });
    }
    public override function getDatatype() : Datatype {
        return Datatype.Usertype(mName.getName(), mName.getTemplateParams(), Struct);
    }
    public override function cloneWithTemplateParams(mapper : StringToDatatypeMapper, templateParams : Array<Datatype>) : SamalStructDeclaration {
        final fields = mFields.map(function(p) {
            return UsertypeField.create(p.getFieldName(), p.getDatatype().complete(mapper));
        });
        return SamalStructDeclaration.create(getSourceRef(), new IdentifierWithTemplate(getName().getName(), templateParams), fields);
    }
    @end_hx
}

class SamalEnumDeclaration extends SamalDatatypeDeclaration {
    -variants : Array<EnumDeclVariant>
    @start_hx
    public override function completeWithUserTypeMap(mapper : StringToDatatypeMapper) : Void {
        mVariants = mVariants.map(function(v) {
            return EnumDeclVariant.create(v.getName(), v.getFields().map(function(f) {
                return UsertypeField.create(f.getFieldName(), f.getDatatype().complete(mapper));
            }));
        });
    }
    public override function getDatatype() : Datatype {
        return Datatype.Usertype(mName.getName(), mName.getTemplateParams(), Enum);
    }
    public override function cloneWithTemplateParams(mapper : StringToDatatypeMapper, templateParams : Array<Datatype>) : SamalEnumDeclaration {
        final cpy = SamalEnumDeclaration.create(getSourceRef(), new IdentifierWithTemplate(mName.getName(), templateParams), mVariants);
        cpy.completeWithUserTypeMap(mapper);
        return cpy;
    }
    @end_hx
}

class SamalScope extends SamalASTNode {
    -statements : Array<SamalExpression>
    #datatype : Datatype
}

class SamalExpression extends SamalASTNode {
    #datatype : Datatype
}


class SamalAssignmentExpression extends SamalExpression {
    +identifier : String
    -rhs : SamalExpression
}

@start_hx
enum SamalBinaryExpressionOp {
    Add;
    Sub;
    Mul;
    Div;
    FunctionChain;
    Less;
    More;
    LessEqual;
    MoreEqual;
}
@end_hx

class SamalBinaryExpression extends SamalExpression {
    -lhs : SamalExpression
    -op : SamalBinaryExpressionOp
    -rhs : SamalExpression
}

class SamalCreateEnumExpression extends SamalExpression {
    -enumName : IdentifierWithTemplate
    -variantName : String
    -params : Array<SamalCreateUsertypeParam>
    @start_hx_ctor()
        ret.mDatatype = Datatype.Unknown(ret.mEnumName.getName(), ret.mEnumName.getTemplateParams());
    @end_hx
}

class SamalCreateLambdaExpression extends SamalExpression {
    -parameters : Array<NameAndTypeParam>
    -returnType : Datatype
    -body : SamalScope
    -capturedVariables : Array<NameAndTypeParam>
    @start_hx_ctor()
        ret.mDatatype = Datatype.Function(ret.mReturnType, ret.mParameters.map(function(p) return p.getDatatype()));
    @end_hx
}

class SamalCreateListExpression extends SamalExpression {
    -children : Array<SamalExpression>
    @start_hx_ctor(baseType : Null<Datatype>)
        if(baseType != null) {
            ret.mDatatype = Datatype.List(baseType.sure());
        }
    @end_hx
}

class SamalCreateStructExpression extends SamalExpression {
    -structName : IdentifierWithTemplate
    -params : Array<SamalCreateUsertypeParam>
    @start_hx_ctor()
        ret.mDatatype = Datatype.Unknown(ret.mStructName.getName(), ret.mStructName.getTemplateParams());
    @end_hx
}

class SamalFunctionCallExpression extends SamalExpression {
    -function : SamalExpression
    -params : Array<SamalExpression>
}

class SamalIfExpression extends SamalExpression {
    -condition : SamalExpression
    -mainBody : SamalScope
    -elseIfs : Array<SamalElseIfBranch>
    -else : SamalScope

    @start_hx
    public function getAllBranches() : Array<SamalElseIfBranch> {
        return [SamalElseIfBranch.create(mCondition, mMainBody)].concat(mElseIfs);
    }
    @end_hx
}

class SamalElseIfBranch {
    -condition : SamalExpression
    -body : SamalScope
}

class SamalLineExpression extends SamalExpression {

}
class SamalLiteralCharExpression extends SamalExpression {
    -val : String
    @start_hx_ctor()
        ret.mDatatype = Datatype.Char;
    @end_hx
}

class SamalLiteralIntExpression extends SamalExpression {
    -val : Int32
    @start_hx_ctor()
        ret.mDatatype = Datatype.Int;
    @end_hx
}

class SamalLoadIdentifierExpression extends SamalExpression {
    +identifier : IdentifierWithTemplate
}

class SamalMatchExpression extends SamalExpression {
    -toMatch : SamalExpression
    -rows : Array<SamalMatchRow>
}

class SamalMatchRow extends SamalASTNode {
    -shape : SamalShape
    -body : SamalExpression
}

class SamalScopeExpression extends SamalExpression {
    -scope : SamalScope
    @start_hx_ctor()
        // in case the user passed in a datatype, we need to forward it
        if(ret.mDatatype != null) {
            ret.mScope.setDatatype(ret.mDatatype.sure());
        }
    @end_hx
    @start_hx
    public override function getDatatype() {
        return mScope.getDatatype();
    }
    public override function setDatatype(datatype : Datatype) {
        mDatatype = datatype;
        mScope.setDatatype(datatype);
    }
    @end_hx
}
class SamalSimpleEnumIsVariant extends SamalExpression {
    -enumExpr : SamalExpression
    -variantName : String
    -variantIndex : Int
}

class SamalSimpleFetchEnumField extends SamalExpression {
    -enumExpr : SamalExpression
    -variantName : String
    -variantIndex : Int
    -fieldName : String
    -fieldIndex : Int
}

class SamalSimpleIfExpression extends SamalExpression {
    -condition : SamalExpression
    -mainBody : SamalScope
    -elseBody : SamalScope
}

class SamalSimpleListCreateEmpty extends SamalExpression {
}

class SamalSimpleListGetHead extends SamalExpression {
    -list : SamalExpression
}

class SamalSimpleListGetTail extends SamalExpression {
    -list : SamalExpression
}

class SamalSimpleListIsEmpty extends SamalExpression {
    -list : SamalExpression
    @start_hx_ctor()
        ret.mDatatype = Datatype.Bool;
    @end_hx
}

class SamalSimpleListPrepend extends SamalExpression {
    -value : SamalExpression
    -list : SamalExpression
}

class SamalSimpleTailCallSelf extends SamalLineExpression {
    -parameters : Array<SamalSimpleTailCallSelfParam>
}

class SamalShape extends ASTNode {

}

class SamalShapeEmptyList extends SamalShape {

}

class SamalShapeEnumVariantField {
    -fieldName : String
    -value : SamalShape
}

class SamalShapeEnumVariant extends SamalShape {
    -variant : String
    -fields : Array<SamalShapeEnumVariantField>
}

class SamalShapeSplitList extends SamalShape {
    -head : SamalShape
    -tail : SamalShape
}

class SamalShapeVariable extends SamalShape {
    -variableName : String
}

class SamalTailCallSelf extends SamalLineExpression {
    -parameters : Array<SamalExpression>
}

@start_hx
enum SamalUnaryExpressionOp {
    Not;
}
@end_hx

class SamalUnaryExpression extends SamalExpression {
    -op : SamalUnaryExpressionOp
    -expr : SamalExpression
}

class SamalSimpleUnreachable extends SamalExpression {

}