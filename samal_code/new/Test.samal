module Main

fn add(a : int, b : int) -> int {
    a + b
}

fn fib(n : int) -> int {
    if n < 2 {
    n
    } else {
    fib(n - 1) + fib(n - 2)
    }
}

fn reverseHelper<T>(la : [T], lb : [T]) -> [T] {
    match la {
    [head + tail] -> {
        @@tail_call_self(tail, head + lb)
    }
    [] -> {
        lb
    }
    }
}

fn reverse<T>(l : [T]) -> [T] {
    reverseHelper<T>(l, [:T])
}

fn sum<T>(l : [T]) -> T {
    self = sum<T>
    match l {
    [] -> {
        0
    }
    [head + tail] -> {
        head + self(tail)
    }
    }
}

fn seq(n : int) -> [int] {
    if n < 1 {
    [n]
    } else {
    n + seq(n - 1)
    }
}

fn mainTwo() -> int {
    a = seq
    list = a(10000)
    sum<int>(reverse<int>(sum<int>(list) + list))
}

fn map<S, T>(l : [S], callback : fn(S) -> T) -> [T] {
    match l {
    [] -> [:T]
    [head + tail] -> callback(head) + map<S, T>(tail, callback)
    }
}

struct Sample {
    l : [int]
    m : [int]
}
struct SampleCollector {
    samples : [Sample]
}

fn mainThree() -> int {
    a = {
    outer = 1
    fn(param : int) -> int {
        inner = 5
        outer + param + inner
    }
    }
    a(10)
}

fn createSample(salt : int) -> Sample {
    a = seq(salt)
    b = map<int, int>(seq(salt), fn(n : int) -> int {
    n + 1
    })
    Sample{l : a, m : b}
}

fn createSamples() -> SampleCollector {
    samples = map<int, Sample>(seq(200), fn(i : int) -> Sample {
    createSample(i)
    })
    SampleCollector{samples : samples}
}

struct Point<T> {
    x : T
    y : T
}
enum Maybe<T> {
    Some{v: T}
    None{}
}
fn decide() -> Maybe<int> {
    Maybe<int>::Some{v : 10}
}
fn mainFour() -> int {
    m = decide()
    match m {
        Some{v: v} -> {
            v * 2
        }
        None{} -> 0
    }
}

struct MainRet {
    str : [char]
    b1 : bool
    b2 : bool
    b3 : bool
    b4 : bool
    b5 : bool
}

fn makeTuple<A, B>(a : A, b : B) -> (A, B) {
    (a, b)
}

fn mainFive() -> MainRet {
    s = "Hällö"
    |> map<char, char>(fn(c : char) -> char {
        if c == 'l' {
            'b'
        } else {
            c
        }
    })
    m = Maybe<int>::Some{v: 5}
    n = Maybe<int>::None{}
    MainRet{str: s, b1: s == "Häbbö", b2: s == "Hallo", b3: m == Maybe<int>::None{}, b4: m == Maybe<int>::Some{v: 5}, b5: n == Maybe<int>::None{}}
}

fn mainSix() -> (int, char) {
    makeTuple<int, char>(3, 'ü')
}

fn mainSeven() -> bool {
    false || true
}

fn main() -> int {
    a = 
        @start_native(NATIVE_RETURN : int)
        @native_lang(cpp)
            int i = (int)pow(3, 4);
            NATIVE_RETURN = *&i;
        @native_lang(js)
            NATIVE_RETURN = Math.pow(3, 4)
        @end_native
}